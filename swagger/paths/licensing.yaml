# paths/licensing.yaml
# The 'update:' key has been REMOVED from here.
# 'post:' is now at the root level of this file.
post:
  tags:
    - License Management
  summary: Update license seats and features
  description: |
    Updates the number of seats for different license tiers and features for a customer.
    Requires JWT authentication with certificate fingerprint-based Key IDs following RFC 7515/7517 standards.

    **Restrictions:**

    * Seat quantities (`digitalOnlySeats`, `essentialSeats`, etc.) must be integers. See the schema for minimum values.
    * `workforceOptimizationSeats` and `workforceManagementSeats` have a minimum value of 10.
    * `speechAnalyticsSeats` and `dialerSeats` have a minimum value of 5.
    * If SIP registration is required, include the optional sipCredentials object with the following properties: username, password, domain, proxy (optional), register, authUser (optional), outboundProxy (optional).

    **Authentication Requirements (RFC 7515/7517 JWT Kid Authentication)**

    Each request must include:
    * A JWT with the following in its header:
      * `kid`: SHA-1 fingerprint of your client certificate (without colons)
    * A JWT with the following in its payload:
      * Standard RFC 7519 claims: `iss`, `sub`, `aud`, `iat`, `exp`, `jti`
      * A payload hash of the request body
      * A unique `jti` (JWT ID) - never reuse IDs
      * An `exp` (expiration) timestamp - max 30 minutes in the future

    **Certificate Fingerprint Calculation**

    The `kid` (Key ID) must be the SHA-1 fingerprint of your client certificate:

    ```python
    from cryptography import x509
    import hashlib

    # Load certificate and calculate fingerprint
    with open("client-cert.crt", "rb") as f:
        cert_data = f.read()
    
    certificate = x509.load_pem_x509_certificate(cert_data)
    der_bytes = certificate.public_bytes(encoding=x509.Encoding.DER)
    kid = hashlib.sha1(der_bytes).hexdigest()
    ```

    **Signature Generation**

    To ensure data integrity, the request body must be signed.

    1.  **Request Body Preparation:**
        * Prepare your license update request properties
    2.  **JSON Serialization:**
        * Serialize the JSON request body using `json.dumps` (or an equivalent function in your programming language) with the following parameters:
            * `sort_keys=False` (to preserve property order)
            * `separators=(',', ':')` (to minimize whitespace)
        * This will produce a compact JSON string with no unnecessary whitespace.
    3.  **UTF-8 Encoding:** Encode the resulting JSON string as UTF-8.
    4.  **Hashing:** Calculate the SHA-256 hash of the UTF-8 encoded JSON string.
    5.  Include the resulting hash in the `payload_hash` claim of your JWT along with RFC 7519 standard claims.

    **Example (Python)**

    ```python
    import json
    import hashlib
    import uuid
    import time
    from cryptography import x509

    # Step 1: Calculate certificate fingerprint for kid
    with open("client-cert.crt", "rb") as f:
        cert_data = f.read()
    
    certificate = x509.load_pem_x509_certificate(cert_data)
    der_bytes = certificate.public_bytes(encoding=x509.Encoding.DER)
    kid = hashlib.sha1(der_bytes).hexdigest()

    # Step 2: License update payload
    payload = {
        "ccId": {
            "id": "EXAMPLECUSTOMERID",
            "divisionId": "EXAMPLEDIVISIONID"
        },
        "digitalOnlySeats": 10,
        "essentialSeats": 10,
        "professionalSeats": 10,
        "eliteSeats": 10,
        "workforceOptimizationSeats": 10,
        "workforceManagementSeats": 10,
        "speechAnalyticsSeats": 5,
        "dialerSeats": 5,
        "aiMessaging": {
            "standardBundles": 5,
            "advancedBundles": 0
        },
        "aiAudioServices": {
            "additionalHours": 20
        },
        "ehrEmrIntegrationSeats": 10,
        "sipCredentials": {
            "username": "user123",
            "password": "secret",
            "domain": "sip.example.com",
            "proxy": "proxy.example.com",
            "register": true,
            "authUser": "authuser123",
            "outboundProxy": "outbound.example.com"
        }
    }

    # Step 3: Serialize the JSON (important: with specific parameters)
    payload_string = json.dumps(payload, sort_keys=False, separators=(',', ':')).encode('utf-8')

    # Step 4: Calculate the hash
    payload_hash = hashlib.sha256(payload_string).hexdigest()

    # Step 5: Current time and expiration (30 minutes in the future)
    current_time = int(time.time())
    expiration_time = current_time + (30 * 60)

    # Step 6: Create JWT header with certificate fingerprint
    jwt_header = {
        "alg": "RS256",
        "typ": "JWT",
        "kid": kid  # Certificate fingerprint
    }

    # Step 7: Create JWT payload with RFC 7519 standard claims
    jwt_payload = {
        "iss": "xima-ccaas",        # Issuer (required)
        "sub": kid,                 # Subject - certificate fingerprint
        "aud": "xima-ccaas",        # Audience (required)
        "payload_hash": payload_hash,
        "jti": str(uuid.uuid4()),   # Unique ID for this request
        "exp": expiration_time,     # Expiration timestamp
        "iat": current_time         # Issued at timestamp
    }

    # ... (Continue with JWT creation and signing using RS256)
    ```

    **Important:**
    * The server will perform the same JSON serialization to normalize the payload before verifying the signature.
    * Adhering to the specified serialization parameters is crucial for successful signature verification.
    * The server tracks used JTIs until their expiration to prevent replay attacks.

    **Note:**
    * Professional and Elite seats include a base number of AI audio hours per agent.
    * An account with at least one Elite license automatically includes one (1) Standard AI Messaging bundle.
    * **Standard tier:** Each bundle provides 5,000 AI messages and 2 knowledge bases. Purchase more bundles for more capacity.
    * **Advanced tier:** Required for 3rd party integrations. Each bundle also provides 5,000 messages and 5 knowledge bases.
    * The `aiAudioServices.additionalHours` field is for purchasing additional transcription hours.
  security:
    - bearerAuth: []
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: '../components/schemas.yaml#/LicenseUpdateRequest'
        examples:
          defaultExample: #
            value:
              ccId:
                id: EXAMPLECUSTOMERID
                divisionId: EXAMPLEDIVISIONID
              digitalOnlySeats: 10
              essentialSeats: 10
              professionalSeats: 10
              eliteSeats: 10
              workforceOptimizationSeats: 10
              workforceManagementSeats: 10
              speechAnalyticsSeats: 5
              dialerSeats: 5
              aiMessaging:
                standardBundles: 5
                advancedBundles: 0
              aiAudioServices:
                additionalHours: 20
              ehrEmrIntegrationSeats: 10
              sipCredentials:
                username: user123
                password: secret
                domain: sip.example.com
                proxy: proxy.example.com
                register: true
                authUser: authuser123
                outboundProxy: outbound.example.com
  responses:
    '200':
      description: License updated successfully. The response only includes fields that were changed as a result of the POST.
      content:
        application/json:
          schema:
            $ref: '../components/schemas.yaml#/LicenseUpdateResponse'
          examples:
            successResponse: #
              value:
                ccId:
                  id: EXAMPLECUSTOMERID
                  divisionId: EXAMPLEDIVISIONID
                changes:
                  digitalOnlySeats:
                    oldValue: 10
                    newValue: 15
                  eliteSeats:
                    oldValue: 10
                    newValue: 20
                  speechAnalyticsSeats:
                    oldValue: 5
                    newValue: 10
                  aiMessaging:
                    standardBundles:
                      oldValue: 3
                      newValue: 5
                    advancedBundles:
                      oldValue: 0
                      newValue: 0
                  aiAudioServices:
                    additionalHours:
                      oldValue: 10
                      newValue: 20
                  ehrEmrIntegrationSeats:
                    oldValue: 5
                    newValue: 10
                  sipCredentials:
                    username:
                      oldValue: "user456"
                      newValue: "user123"
                    password:
                      oldValue: "oldpassword"
                      newValue: "secret"
                    domain:
                      oldValue: "old.example.com"
                      newValue: "sip.example.com"
    '400':
      description: Bad request - Invalid parameters
      content:
        application/json:
          schema:
            $ref: '../components/schemas.yaml#/Error'
          examples:
            validationError: #
              value:
                code: VALIDATION_ERROR
                message: At least 5 speech analytics seats are required
            invalidJti: #
              value:
                code: INVALID_JTI
                message: JTI must be a valid UUID v4 format
            expiredToken: #
              value:
                code: EXPIRED_TOKEN
                message: Request has expired (exp timestamp is in the past)
    '401':
      description: Unauthorized - Invalid JWT
      content:
        application/json:
          schema:
            $ref: '../components/schemas.yaml#/Error'
          examples:
            invalidToken: #
              value:
                code: INVALID_TOKEN
                message: The JWT signature is invalid
            duplicateJti: #
              value:
                code: DUPLICATE_JTI
                message: This JTI has already been used
    '404':
      description: Not found - Customer not found
      content:
        application/json:
          schema:
            $ref: '../components/schemas.yaml#/Error'
          examples:
            customerNotFound: #
              value:
                code: CUSTOMER_NOT_FOUND
                message: No customer found with the provided ccId
